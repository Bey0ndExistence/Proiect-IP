Client: *daca nu se primeste raspuns dupa X secunde, se retrimite cererea

	enum COR {registerResponse <= updateOnlineUsers <= errorLogin <= chatMsg}
	dictionar<string, string> registerResponse {
									tip: registerResponse
									body: DB response
								}
	dictionar<string, Object> updateOnlineUsers {
									type: updateOnlineUsers,
									body: onlineUsers: List<string>
								}
	
	dictionar<string, string> errorLogin {
							tip: registerResponse
							body: DB response
						}
	dictionar<string, string> chatMsg {
								tip: chatMsg,
								senderUsername: type String,
								receiverUsername: type String,
								body: type String
							}
	
	1. Register:- compleateaza datele in form
	 		    - se apasa register si se trimite la server request de tipul register
			    - daca se primeste: -> ok, redirect la login page
									-> eroare, apare mesaj de eroare cu rosu
				Request: dictionar<string, Object> register
				Response: dictionar<string, string> registerResponse
									
	2. Login: - daca se primeste response: -> ok, redirect la chating room page
								  -> eroare, apare mesaj de eroare cu rosu
			  - se trimite 
			  Request: dictionar<string, Object> login
			  Response: dictionar<string, Object> updateOnlineUsers
						dictionar<string, string> errorLogin
						
	3. ChatMsg: - append la fisier la mesajul transmis/primit
				Request, Response: dictionar<string, string> chatMsg
	
	4. Logout: - trimite cerere de logout catre server 
					dictionar<string, Object> logout
			   - se da redirect la pagina de login
			   dictionar<string, string> logout
			   Request: dictionar<string, Object> logout
			   Response: - 
			   
	5. Apasare eXit button: - se face punctul 4
							- se inchide aplicatia
_______________________________________________________________________________
Format mesaje: dictionar<string, string> mesajDefault {
				tip: type COR,
				senderUsername: type String, 
				receiverUsername: 
				body: 
			}						  
			
			!!Nu mai folosim Message Log format: [sender1]: message \n
								[sender2]: message \n
								[sender2]: message \n
								[sender1]: message \n
								[sender1]: message \n
								[sender2]: message \n
_______________________________________________________________________________
												
												
Server: threads: - main: asculta la port si primeste clienti si face new thread pentru fiecare client
				 - clientThread: citeste mesajele de la client si le pune in requestQ
				 - requestThread: ia din requestQ si apeleaza intr-un nou thread functia de handler COR 
				 - CORThread: rezolva requestul in functie de tipul sau si trimite raspunsul catre receiver
				 
	enum COR {register <= logout <= login <= chatMsg}
	dictionar<string, Object> register {
								tip: register,
								body: dictionar<string, string>
							}
	dictionar<string, Object> login {
								tip: login,
								body: dictionar<string, string>
							}
	dictionar<string, Object> logout {
								tip: logout,
								senderUsername: type String
							}
	dictionar<string, string> chatMsg {
								tip: chatMsg,
								senderUsername: type String,
								receiverUsername: type String,
								body: type String
							}
							
	- ia din msgQ mesaj de tipul: 
	1. Register: trimit dictionar cu datele formularului la DB
				- DB response: -> success => trimit DB response ok in body la client
							   -> error => trimit DB response eroare in body la client
				Request: dictionar<string, Object> register
				Response: dictionar<string, string> registerResponse					
							   
	2. Login: trimit dictionar cu user si parola la DB
				- DB response: -> success => append la onlineUsers cu userul nou logat
										  => se trimite lista actualizata (dictionarul) la toti userii
										  dictionar<string, Object> updateOnlineUsers 
							   -> error => trimit DB response eroare in body la client
				Request: dictionar<string, Object> login
				Response: dictionar<string, Object> updateOnlineUsers (brodcast)
						  dictionar<string, string> errorLogin
				
	3. ChatMsg: trimit la receiver mesajul  dictionar<string, string> chatMsg
				Request, Response: dictionar<string, string> chatMsg
	
	4. Logout: => remove din onlineUsers a userului care a trimis cererea de logout
			   => se trimite lista actualizata (dictionarul) la toti userii
				Request: dictionar<string, Object> logout
				Response: dictionar<string, Object> updateOnlineUsers (broadcast)
									    
Linkuri utile:
		- COR:  https://refactoring.guru/design-patterns/chain-of-responsibility/csharp/example